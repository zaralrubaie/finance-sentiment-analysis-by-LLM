# -*- coding: utf-8 -*-
"""Financial sentement

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SzY3pNrJ6Myvv5Rih1ZKdULVfveG26C0
"""

import pandas as pd
df=pd.read_csv('/content/data.csv')
df.head(10)

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
df['Sentiment']=le.fit_transform(df['Sentiment'])

from sklearn.model_selection import train_test_split
from transformers import AutoTokenizer, AutoModelForSequenceClassification

X = df["Sentence"]
y = df["Sentiment"]

X_train, X_temp, y_train, y_temp = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)

X_val, X_test, y_val, y_test = train_test_split(
    X_temp, y_temp, test_size=0.5, random_state=42, stratify=y_temp
)
tokenizer = AutoTokenizer.from_pretrained("distilbert-base-uncased")
num_label=df['Sentiment'].nunique()
model=AutoModelForSequenceClassification.from_pretrained("distilbert-base-uncased",num_labels=num_label)

def tokenize_function(example):
    return tokenizer(example["Sentence"], padding="max_length", truncation=True)

train_encodings = tokenizer(list(X_train), padding=True, truncation=True, max_length=128)
val_encodings   = tokenizer(list(X_val), padding=True, truncation=True, max_length=128)
test_encodings  = tokenizer(list(X_test), padding=True, truncation=True, max_length=128)

train_labels_list = y_train.tolist()
val_labels_list   = y_val.tolist()
test_labels_list  = y_test.tolist()

import torch

class SentimentDataset(torch.utils.data.Dataset):
    def __init__(self, encodings, labels):
        self.encodings = encodings
        self.labels = labels

    def __len__(self):
        return len(self.labels)

    def __getitem__(self, idx):
        item = {key: torch.tensor(val[idx]) for key, val in self.encodings.items()}
        item["labels"] = torch.tensor(self.labels[idx])
        return item

train_dataset = SentimentDataset(train_encodings, train_labels_list)
val_dataset   = SentimentDataset(val_encodings, val_labels_list)
test_dataset  = SentimentDataset(test_encodings, test_labels_list)

from transformers import Trainer, TrainingArguments
import evaluate

# Accuracy metric
accuracy = evaluate.load("accuracy")
def compute_metrics(eval_pred):
    logits, labels = eval_pred
    predictions = logits.argmax(axis=-1)
    return accuracy.compute(predictions=predictions, references=labels)

training_args = TrainingArguments(
    output_dir="./results",
    eval_strategy="epoch",
    learning_rate=2e-5,
    per_device_train_batch_size=16,
    per_device_eval_batch_size=16,
    num_train_epochs=3,
    weight_decay=0.01,
    logging_dir="./logs",
    logging_steps=10,
    save_total_limit=1,
    report_to=[]
)


trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=train_dataset,
    eval_dataset=val_dataset,
    tokenizer=tokenizer,
    compute_metrics=compute_metrics
)

trainer.train()

results = trainer.predict(test_dataset)
print("Test Accuracy:", results.metrics["test_accuracy"])

import numpy as np

preds = np.argmax(results.predictions, axis=-1)
print(preds[:10])

import gradio as gr
import torch

device = "cuda" if torch.cuda.is_available() else "cpu"
model.to(device)
model.eval()


id2label = {0: "negative", 1: "neutral", 2: "positive"}

def predict_sentiment(text):
    enc = tokenizer(text, padding=True, truncation=True, max_length=128, return_tensors="pt")
    enc = {k: v.to(device) for k, v in enc.items()}

    with torch.no_grad():
        outputs = model(**enc)
        logits = outputs.logits
        pred_idx = torch.argmax(logits, dim=-1).item()  # get integer

    return id2label[pred_idx]

iface = gr.Interface(
    fn=predict_sentiment,
    inputs="text",
    outputs="text",
    title="Financial Sentiment Predictor",
    description="Type a financial sentence and see the predicted sentiment."
)

iface.launch()